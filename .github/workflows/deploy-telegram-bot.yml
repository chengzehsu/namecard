name: 部署 Telegram Bot 到 Zeabur

on:
  push:
    branches: [ main ]
    paths:
      - 'src/namecard/api/telegram_bot/**'
      - 'deployment/environments/production/requirements-telegram.txt'
      - '.github/workflows/deploy-telegram-bot.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: '強制部署 (跳過預檢查)'
        required: false
        default: false
        type: boolean

jobs:
  pre-deploy-checks:
    name: 📋 預部署檢查
    runs-on: ubuntu-latest
    if: ${{ !inputs.force_deploy }}
    
    steps:
    - name: 🔄 檢出代碼
      uses: actions/checkout@v4
      
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📦 安裝依賴
      run: |
        pip install --upgrade pip
        pip install -r deployment/environments/production/requirements-telegram.txt
        
    - name: 🔍 語法檢查
      run: |
        echo "檢查 Telegram Bot 語法..."
        python -m py_compile src/namecard/api/telegram_bot/app.py
        python -m py_compile src/namecard/api/telegram_bot/main.py
        python -m py_compile src/namecard/api/telegram_bot/telegram_main.py
        echo "✅ 語法檢查通過"
        
    - name: 🧪 核心模組驗證
      run: |
        echo "驗證核心模組..."
        python -c "
        import sys
        sys.path.append('.')
        sys.path.append('src')
        try:
            # 測試核心模組
            from config import Config
            from src.namecard.infrastructure.messaging.telegram_client import TelegramBotHandler
            print('✅ 核心模組載入成功')
        except ImportError as e:
            if 'linebot' in str(e).lower():
                print(f'❌ LINE Bot 依賴錯誤: {e}')
                sys.exit(1)
            else:
                print(f'⚠️ 依賴模組缺失 (部署時會安裝): {e}')
        except Exception as e:
            print(f'❌ 模組載入失敗: {e}')
            sys.exit(1)
        "
        
    - name: 📁 檢查必要文件
      run: |
        echo "檢查必要文件..."
        required_files=(
          "src/namecard/api/telegram_bot/app.py"
          "src/namecard/api/telegram_bot/main.py"
          "src/namecard/api/telegram_bot/telegram_main.py"
          "src/namecard/infrastructure/messaging/telegram_client.py" 
          "deployment/environments/production/requirements-telegram.txt"
          "src/namecard/infrastructure/ai/card_processor.py"
          "src/namecard/infrastructure/storage/notion_client.py"
          "src/namecard/core/services/batch_service.py"
          "src/namecard/core/services/multi_card_service.py"
          "src/namecard/core/services/interaction_service.py"
          "src/namecard/core/services/address_service.py"
          "config/base.py"
        )
        
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ $file 存在"
          else
            echo "❌ $file 缺失"
            exit 1
          fi
        done

  deploy-telegram-bot:
    name: 🚀 部署 Telegram Bot
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks]
    if: always() && (needs.pre-deploy-checks.result == 'success' || needs.pre-deploy-checks.result == 'skipped')
    
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
    - name: 🔄 檢出代碼
      uses: actions/checkout@v4
      
    - name: 🛠️ 安裝 Zeabur CLI
      run: |
        echo "安裝 Zeabur CLI..."
        npm install -g @zeabur/cli
        zeabur --version
        
    - name: 🔐 配置 Zeabur 認證
      run: |
        echo "配置 Zeabur 認證..."
        export ZEABUR_TOKEN="${{ secrets.ZEABUR_TOKEN }}"
        
    - name: 🚀 部署到 Zeabur
      env:
        ZEABUR_TOKEN: ${{ secrets.ZEABUR_TOKEN }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_API_KEY_FALLBACK: ${{ secrets.GOOGLE_API_KEY_FALLBACK }}
        NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
      run: |
        echo "部署 Telegram Bot 到 Zeabur..."
        
        # 使用環境變數認證和部署，顯示詳細輸出
        echo "🔍 開始部署，顯示詳細日誌..."
        zeabur deploy --environment production --verbose || {
          echo "❌ 部署命令失敗，嘗試基本部署..."
          zeabur deploy --environment production
        }
        
        echo "⚙️ 設置環境變數到 Zeabur 服務..."
        
        # 使用 zeabur variable set 設置環境變數
        zeabur variable set TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
        zeabur variable set GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}"
        zeabur variable set GOOGLE_API_KEY_FALLBACK="${{ secrets.GOOGLE_API_KEY_FALLBACK }}"
        zeabur variable set NOTION_API_KEY="${{ secrets.NOTION_API_KEY }}"
        zeabur variable set NOTION_DATABASE_ID="${{ secrets.NOTION_DATABASE_ID }}"
        zeabur variable set GEMINI_MODEL="gemini-2.5-pro"
        zeabur variable set PORT="5003"
        zeabur variable set FLASK_ENV="production"
        zeabur variable set PYTHONUNBUFFERED="1"
        zeabur variable set SERVICE_TYPE="telegram-bot"
        
        echo "🔄 重新部署以套用環境變數..."
        zeabur redeploy
        
        echo "✅ 部署和環境變數設置完成"
        
    - name: ⏳ 等待服務啟動
      run: |
        echo "等待 Telegram Bot 服務啟動..."
        sleep 60
        
    - name: 🔍 健康檢查
      env:
        ZEABUR_TOKEN: ${{ secrets.ZEABUR_TOKEN }}
      run: |
        echo "執行 Telegram Bot 健康檢查..."
        
        # 獲取部署 URL（使用 Zeabur CLI）
        DEPLOY_URL=$(zeabur domain list 2>/dev/null | grep -o 'https://[^[:space:]]*' | head -1 || echo "")
        
        # 如果還是沒有 URL，嘗試使用專案名稱構建 URL
        if [[ -z "$DEPLOY_URL" ]]; then
          DEPLOY_URL="https://namecard-app.zeabur.app"
          echo "⚠️ 使用預設 URL: $DEPLOY_URL"
        fi
        
        echo "🌐 Telegram Bot URL: $DEPLOY_URL"
        
        # 健康檢查
        max_retries=10
        retry_count=0
        
        while [[ $retry_count -lt $max_retries ]]; do
          echo "⏳ 健康檢查嘗試 $((retry_count + 1))/$max_retries..."
          
          if curl -f -s --max-time 30 "$DEPLOY_URL/health" > /dev/null; then
            echo "✅ Telegram Bot 健康檢查通過"
            
            # 顯示健康檢查詳細資訊
            HEALTH_INFO=$(curl -s "$DEPLOY_URL/health" 2>/dev/null || echo "無法獲取健康資訊")
            echo "📊 健康檢查詳情: $HEALTH_INFO"
            break
          else
            retry_count=$((retry_count + 1))
            echo "❌ 健康檢查失敗，等待 15 秒後重試..."
            sleep 15
          fi
        done
        
        if [[ $retry_count -eq $max_retries ]]; then
          echo "❌ Telegram Bot 健康檢查最終失敗"
          echo "🔍 嘗試獲取服務狀態..."
          zeabur service list || echo "無法獲取服務列表"
          echo "💾 儲存部署 URL 供手動檢查: $DEPLOY_URL"
          # 不讓健康檢查失敗阻止整個部署流程
          echo "⚠️ 健康檢查失敗，但部署可能仍然成功"
        fi
        
    - name: 🧪 部署後測試
      env:
        ZEABUR_TOKEN: ${{ secrets.ZEABUR_TOKEN }}
      run: |
        echo "執行 Telegram Bot 部署後測試..."
        
        # 使用相同的方法獲取部署 URL
        DEPLOY_URL=$(zeabur domain list 2>/dev/null | grep -o 'https://[^[:space:]]*' | head -1 || echo "")
        
        if [[ -z "$DEPLOY_URL" ]]; then
          DEPLOY_URL="https://namecard-app.zeabur.app"
          echo "⚠️ 使用預設 URL: $DEPLOY_URL"
        fi
        
        echo "🔍 測試主要端點..."
        
        # 測試健康檢查端點
        echo "📡 測試健康檢查端點..."
        if curl -f -s --max-time 10 "$DEPLOY_URL/health"; then
          echo "✅ 健康檢查端點正常"
        else
          echo "⚠️ 健康檢查端點無回應"
        fi
        
        # 測試服務狀態端點
        echo "📡 測試服務狀態端點..."
        if curl -f -s --max-time 10 "$DEPLOY_URL/test"; then
          echo "✅ 服務狀態端點正常"
        else
          echo "⚠️ 服務狀態端點無回應"
        fi
        
        # 測試 webhook 端點 (預期會返回錯誤，這是正常的)
        echo "📡 測試 telegram-webhook 端點..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$DEPLOY_URL/telegram-webhook" \
          -H "Content-Type: application/json" \
          -d '{}' || echo "000")
        
        if [[ "$HTTP_CODE" == "400" ]]; then
          echo "✅ Webhook 端點正常 (預期的 400 錯誤)"
        else
          echo "⚠️ Webhook 端點回應碼: $HTTP_CODE"
        fi
        
        echo "📋 測試完成，部署 URL: $DEPLOY_URL"
        
    - name: 📤 部署結果通知
      env:
        ZEABUR_TOKEN: ${{ secrets.ZEABUR_TOKEN }}
      run: |
        echo "📊 Telegram Bot 部署結果:"
        echo "📅 部署時間: $(date)"
        echo "🌿 分支: ${{ github.ref_name }}"
        echo "📝 提交: ${{ github.sha }}"
        echo "👤 觸發者: ${{ github.actor }}"
        echo "🏷️ 環境: ${{ inputs.environment || 'production' }}"
        
        # 獲取部署 URL
        DEPLOY_URL=$(zeabur domain list 2>/dev/null | grep -o 'https://[^[:space:]]*' | head -1 || echo "https://namecard-app.zeabur.app")
        echo "🌐 Telegram Bot URL: $DEPLOY_URL"
        
        # 顯示環境變數設置狀態
        echo "⚙️ 環境變數設置狀態:"
        zeabur variable list 2>/dev/null || echo "無法獲取環境變數列表"
        
        echo ""
        echo "🎉 Telegram Bot 部署流程完成！"
        echo ""
        echo "📱 下一步："
        echo "1. 設置 Telegram Bot webhook URL:"
        echo "   curl -X POST \"https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/setWebhook\" \\"
        echo "        -d \"url=$DEPLOY_URL/telegram-webhook\""
        echo ""
        echo "2. 驗證 webhook 設置:"
        echo "   curl \"https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/getWebhookInfo\""
        echo ""
        echo "3. 測試 Bot 功能:"
        echo "   - 在 Telegram 中發送 /start 給你的 Bot"
        echo "   - 發送名片照片測試 AI 識別功能"
        echo ""
        echo "4. 監控應用:"
        echo "   - 健康檢查: $DEPLOY_URL/health"
        echo "   - 服務狀態: $DEPLOY_URL/test"

  cleanup:
    name: 🧹 清理
    runs-on: ubuntu-latest
    needs: [deploy-telegram-bot]
    if: always()
    
    steps:
    - name: 🗑️ 清理臨時文件
      run: |
        echo "清理部署過程中的臨時文件..."
        rm -f zeabur-telegram.json
        echo "✅ 清理完成"