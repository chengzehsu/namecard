name: 名片管理 LINE Bot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10.x, 3.11]
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4
      
    - name: 設置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 安裝系統依賴
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1
        
    - name: 安裝 Python 依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
        
    - name: 代碼品質檢查 - flake8
      run: |
        # 檢查 Python 語法錯誤和未定義名稱 (排除虛擬環境和不相關目錄)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,venv,env,.git,.github,__pycache__,.pytest_cache,.tox
        # 檢查代碼複雜度和風格
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.venv,venv,env,.git,.github,__pycache__,.pytest_cache,.tox
        
    - name: 代碼格式檢查 - black
      run: |
        black --check --diff . --exclude="\.venv|venv|env|__pycache__|\.git"
        
    - name: Import 排序檢查 - isort
      run: |
        isort --check-only --diff . --skip-glob="*.venv/*" --skip-glob="*venv/*" --skip-glob="*env/*" --skip-glob="*__pycache__/*"
        
    - name: 運行測試
      env:
        # 測試環境變數 (使用模擬值)
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN || 'test_token' }}
        LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET || 'test_secret' }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test_key' }}
        NOTION_API_KEY: ${{ secrets.NOTION_API_KEY || 'test_notion_key' }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID || 'test_db_id' }}
      run: |
        # 運行基本配置測試
        python -c "import config; print('✅ Config module loads successfully')"
        
        # 運行現有測試文件
        if [ -f "test_card.py" ]; then
          python test_card.py
        fi
        
        if [ -f "test_new_webhook.py" ]; then
          python test_new_webhook.py
        fi
        
        # 檢查主要模組是否可以正常導入
        python -c "
        try:
            from name_card_processor import NameCardProcessor
            print('✅ NameCardProcessor 模組正常')
        except Exception as e:
            print(f'⚠️ NameCardProcessor 需要 API key: {e}')
            
        try:
            from notion_manager import NotionManager
            print('✅ NotionManager 模組正常')
        except Exception as e:
            print(f'⚠️ NotionManager 需要 API key: {e}')
            
        from batch_manager import BatchManager
        print('✅ BatchManager 模組正常')
        
        print('✅ 所有核心模組檢查完成')
        "
        
    - name: 應用健康檢查
      env:
        LINE_CHANNEL_ACCESS_TOKEN: 'test_token'
        LINE_CHANNEL_SECRET: 'test_secret' 
        GOOGLE_API_KEY: 'test_key'
        NOTION_API_KEY: 'test_notion_key'
        NOTION_DATABASE_ID: 'test_db_id'
      run: |
        # 檢查 Flask 應用是否可以啟動 (不需要實際 API keys)
        timeout 10s python -c "
        import sys
        sys.path.append('.')
        try:
            from app import app
            print('✅ Flask 應用可以正常初始化')
        except Exception as e:
            print(f'⚠️ Flask 應用初始化需要有效的 API keys: {e}')
        " || echo "✅ 應用檢查完成 (可能需要 API keys)"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4
      
    - name: 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: 安裝安全掃描工具
      run: |
        pip install bandit safety
        
    - name: 安全漏洞掃描 - bandit
      run: |
        bandit -r . -f txt || true
        
    - name: 依賴安全檢查 - safety
      run: |
        pip install -r requirements.txt
        safety check || true

  build-check:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4
      
    - name: 檢查部署文件
      run: |
        echo "📋 檢查部署相關文件..."
        
        if [ -f "requirements.txt" ]; then
          echo "✅ requirements.txt 存在"
          echo "📦 依賴套件數量: $(wc -l < requirements.txt)"
        fi
        
        if [ -f "Procfile" ]; then
          echo "✅ Procfile 存在 (Heroku 部署)"
          cat Procfile
        fi
        
        if [ -f "railway_app.py" ]; then
          echo "✅ railway_app.py 存在 (Railway 部署)"
        fi
        
        if [ -f "deploy.sh" ]; then
          echo "✅ deploy.sh 存在"
        fi
        
        echo "✅ 建構檢查完成"

  notify-success:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-check]
    if: success()
    
    steps:
    - name: 成功通知
      run: |
        echo "🎉 CI/CD Pipeline 成功完成！"
        echo "✅ 所有測試通過"
        echo "✅ 安全掃描完成" 
        echo "✅ 建構檢查通過"
        echo "🚀 準備部署"