name: 部署 LINE Bot 到 Zeabur

on:
  # 手動觸發或在有 ZEABUR_TOKEN 時自動部署
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CLAUDE.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/deploy-zeabur.yml'
  
  # 手動觸發部署
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      
      force_deploy:
        description: '強制部署 (跳過測試)'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.9'
  ZEABUR_TOKEN: ${{ secrets.ZEABUR_TOKEN }}

jobs:
  # 預部署檢查 (可選跳過)
  pre-deploy-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy != 'true'
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4
      
    - name: 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 快速語法檢查
      run: |
        echo "🔍 執行快速語法檢查..."
        python -m py_compile app.py
        echo "✅ app.py 語法檢查通過"
        
        python -m py_compile simple_config.py
        echo "✅ simple_config.py 語法檢查通過"
        
        # 檢查主要模組是否可以編譯
        python -m py_compile src/namecard/api/line_bot/main.py
        python -m py_compile src/namecard/infrastructure/ai/card_processor.py
        python -m py_compile src/namecard/infrastructure/storage/notion_client.py
        echo "✅ 核心模組語法檢查通過"
        
    - name: 檢查必要文件
      run: |
        echo "📋 檢查部署必要文件..."
        
        # 檢查必要文件
        files=("app.py" "simple_config.py" "requirements.txt" "zeabur.json")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file 存在"
          else
            echo "❌ $file 缺失"
            exit 1
          fi
        done
        
        # 檢查 requirements.txt 內容
        echo "📦 檢查 Python 依賴:"
        cat requirements.txt
        
        echo "✅ 部署檢查完成"

  # 部署到 Zeabur
  deploy-to-zeabur:
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: always() && (needs.pre-deploy-checks.result == 'success' || needs.pre-deploy-checks.result == 'skipped' || github.event_name == 'push')
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.app_url }}
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Zeabur 可能需要完整的 Git 歷史
        
    - name: 檢查 Zeabur Token
      run: |
        if [ -z "$ZEABUR_TOKEN" ]; then
          echo "❌ ZEABUR_TOKEN 未設置"
          echo "請在 GitHub Secrets 中設置 ZEABUR_TOKEN"
          echo "獲取方式: https://dash.zeabur.com/account/developer"
          exit 1
        else
          echo "✅ Zeabur Token 已設置"
        fi
        
    - name: 安裝 Zeabur CLI
      run: |
        echo "📦 安裝 Zeabur CLI..."
        
        # 創建目錄
        mkdir -p $HOME/.zeabur/bin
        
        # 下載並安裝 Zeabur CLI (直接下載二進制文件)
        ZEABUR_VERSION="0.5.4"
        curl -sSL "https://github.com/zeabur/cli/releases/download/v${ZEABUR_VERSION}/zeabur_${ZEABUR_VERSION}_linux_amd64" -o $HOME/.zeabur/bin/zeabur
        chmod +x $HOME/.zeabur/bin/zeabur
        
        # 添加到 PATH
        echo "$HOME/.zeabur/bin" >> $GITHUB_PATH
        
        # 驗證安裝
        $HOME/.zeabur/bin/zeabur version
        
    - name: 配置 Zeabur 認證
      run: |
        echo "🔐 配置 Zeabur 認證..."
        if $HOME/.zeabur/bin/zeabur auth login --token "$ZEABUR_TOKEN"; then
          echo "✅ Zeabur 認證成功"
        else
          echo "❌ Zeabur 認證失敗"
          exit 1
        fi
        
    - name: 創建部署配置
      run: |
        echo "⚙️ 創建 Zeabur 部署配置..."
        
        # 創建強制重建的配置文件
        cat > zeabur.json << END_OF_CONFIG
        {
          "build": {
            "command": "pip install -r requirements.txt",
            "force": true,
            "nocache": true
          },
          "environment": {
            "FLASK_ENV": "production",
            "PORT": "5002",
            "PYTHONUNBUFFERED": "1",
            "PYTHON_VERSION": "3.9",
            "SERVICE_TYPE": "line-bot",
            "FORCE_REBUILD": "$(date +%s)"
          },
          "healthcheck": {
            "interval": 30,
            "path": "/health",
            "retries": 3,
            "timeout": 10
          },
          "name": "line-bot-namecard",
          "port": 5002,
          "regions": [
            "hkg"
          ],
          "start": {
            "command": "python app.py"
          }
        }
        END_OF_CONFIG
        
        echo "✅ 強制重建配置已創建"
        cat zeabur.json
        
    - name: 部署到 Zeabur
      id: deploy
      run: |
        echo "🚀 開始部署到 Zeabur (更新現有服務)..."
        
        # 使用現有的專案和服務名稱（從日誌中確認的實際名稱）
        PROJECT_NAME="namecard-bot"
        SERVICE_NAME="namecard-app"
        
        echo "📋 目標配置:"
        echo "- 專案: $PROJECT_NAME"
        echo "- 服務: $SERVICE_NAME" 
        echo "- URL: https://namecard-app.zeabur.app"
        echo "- 應用類型: LINE Bot (app.py)"
        
        # 檢查專案是否存在
        echo "📋 列出所有專案:"
        $HOME/.zeabur/bin/zeabur project list
        
        if ! $HOME/.zeabur/bin/zeabur project list | grep -q "$PROJECT_NAME"; then
          echo "❌ 專案不存在: $PROJECT_NAME"
          echo "請確認專案名稱或手動創建專案"
          exit 1
        else
          echo "✅ 專案已存在: $PROJECT_NAME"
        fi
        
        # 部署到現有服務 (使用正確的 zeabur deploy 命令)
        echo "🔧 更新現有服務到 LINE Bot..."
        echo "📋 使用 zeabur deploy 命令部署..."
        
        # 強制重建並部署，清除所有緩存
        echo "🔧 強制清除緩存並重新構建..."
        
        # 嘗試停止服務以強制重建
        echo "🛑 嘗試停止現有服務..."
        $HOME/.zeabur/bin/zeabur service stop \
          --project="68885a362fbe6dd524f69c9c" \
          --name="$SERVICE_NAME" || true
        
        # 等待服務停止
        sleep 5
        
        # 強制部署新版本
        DEPLOY_OUTPUT=$($HOME/.zeabur/bin/zeabur deploy \
          --project="68885a362fbe6dd524f69c9c" \
          --name="$SERVICE_NAME" \
          --create=false \
          --force 2>&1)
        
        echo "$DEPLOY_OUTPUT"
        
        # 檢查部署是否成功
        if [ $? -eq 0 ]; then
          echo "✅ 部署命令執行成功"
        else
          echo "❌ 部署命令執行失敗"
          exit 1
        fi
        
        # 使用已知的 URL
        APP_URL="https://namecard-app.zeabur.app"
        echo "✅ 部署完成!"
        echo "🔗 應用 URL: $APP_URL"
        echo "📝 服務已更新為 LINE Bot 配置"
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        
    - name: 設置環境變數
      env:
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_API_KEY_FALLBACK: ${{ secrets.GOOGLE_API_KEY_FALLBACK }}
        NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
      run: |
        echo "🔧 設置 Zeabur 環境變數..."
        
        PROJECT_NAME="namecard-bot"
        SERVICE_NAME="namecard-app"
        
        # 設置所有必要的環境變數
        env_vars=(
          "LINE_CHANNEL_ACCESS_TOKEN=$LINE_CHANNEL_ACCESS_TOKEN"
          "LINE_CHANNEL_SECRET=$LINE_CHANNEL_SECRET"
          "GOOGLE_API_KEY=$GOOGLE_API_KEY"
          "GOOGLE_API_KEY_FALLBACK=$GOOGLE_API_KEY_FALLBACK"
          "NOTION_API_KEY=$NOTION_API_KEY"
          "NOTION_DATABASE_ID=$NOTION_DATABASE_ID"
          "PORT=5002"
          "FLASK_ENV=production"
          "PYTHONUNBUFFERED=1"
        )
        
        failed_vars=0
        for env_var in "${env_vars[@]}"; do
          key=$(echo "$env_var" | cut -d'=' -f1)
          value=$(echo "$env_var" | cut -d'=' -f2-)
          
          if [ -n "$value" ] && [ "$value" != "" ]; then
            echo "🔑 設置環境變數: $key"
            if $HOME/.zeabur/bin/zeabur variable create \
              --project="68885a362fbe6dd524f69c9c" \
              --name="$SERVICE_NAME" \
              -k "$key=$value" \
              -y; then
              echo "✅ $key 設置成功"
            else
              echo "❌ 設置 $key 失敗"
              failed_vars=$((failed_vars + 1))
            fi
          else
            echo "⚠️ 跳過空值環境變數: $key"
          fi
        done
        
        if [ $failed_vars -gt 0 ]; then
          echo "❌ 有 $failed_vars 個環境變數設置失敗"
          echo "⚠️ 繼續部署，但可能會有問題"
        fi
        
        echo "✅ 環境變數設置完成"
        
    - name: 健康檢查
      if: steps.deploy.outputs.app_url != ''
      run: |
        echo "🏥 執行部署後健康檢查..."
        
        APP_URL="${{ steps.deploy.outputs.app_url }}"
        
        # 等待服務啟動
        echo "⏳ 等待服務啟動 (30秒)..."
        sleep 30
        
        # 嘗試健康檢查
        for i in {1..5}; do
          echo "🔍 健康檢查嘗試 $i/5..."
          
          if curl -f -s "$APP_URL/health" > /dev/null; then
            echo "✅ 健康檢查通過!"
            echo "🎉 應用已成功部署並運行"
            
            # 顯示應用信息
            echo ""
            echo "📱 **部署完成信息:**"
            echo "- 🔗 應用 URL: $APP_URL"
            echo "- 🏥 健康檢查: $APP_URL/health"
            echo "- 🧪 測試端點: $APP_URL/test"
            echo "- 📞 Webhook URL: $APP_URL/callback"
            
            exit 0
          fi
          
          echo "⏳ 等待 10 秒後重試..."
          sleep 10
        done
        
        echo "⚠️ 健康檢查失敗，但不影響部署流程"
        echo "請手動檢查應用狀態: $APP_URL"
        
    - name: 更新 LINE Bot Webhook URL 提醒
      if: steps.deploy.outputs.app_url != ''
      run: |
        echo "📢 重要提醒: 設置 LINE Bot Webhook URL"
        echo ""
        echo "請在 LINE Developer Console 設置 Webhook URL:"
        echo "🔗 新的 Webhook URL: ${{ steps.deploy.outputs.app_url }}/callback"
        echo ""
        echo "步驟:"
        echo "1. 登入 LINE Developer Console"
        echo "2. 選擇您的 Channel"
        echo "3. 在 Messaging API 設定中更新 Webhook URL"
        echo "4. 確保 Webhook 設定為 Enabled"
        echo ""
        echo "📱 LINE Bot 現已部署並可接收訊息!"

  # 部署後測試
  post-deploy-tests:
    runs-on: ubuntu-latest
    needs: deploy-to-zeabur
    if: needs.deploy-to-zeabur.outputs.app_url != ''
    
    steps:
    - name: 部署後端點測試
      run: |
        echo "🧪 執行部署後測試..."
        
        APP_URL="${{ needs.deploy-to-zeabur.outputs.app_url }}"
        
        # 測試健康端點
        echo "🏥 測試健康檢查端點..."
        if curl -f -s "$APP_URL/health"; then
          echo "✅ 健康檢查端點正常"
        else
          echo "❌ 健康檢查端點異常"
        fi
        
        # 測試 LINE Bot webhook 端點
        echo "📞 測試 LINE Bot webhook 端點..."
        if curl -f -s "$APP_URL/callback"; then
          echo "✅ LINE Bot webhook 端點可訪問"
        else
          echo "❌ LINE Bot webhook 端點不可訪問 (可能需要 POST 請求)"
        fi
        
        echo "✅ 部署後測試完成"

  # 通知部署結果
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-to-zeabur, post-deploy-tests]
    if: always()
    
    steps:
    - name: 部署結果通知
      run: |
        DEPLOY_STATUS="${{ needs.deploy-to-zeabur.result }}"
        TEST_STATUS="${{ needs.post-deploy-tests.result }}"
        APP_URL="${{ needs.deploy-to-zeabur.outputs.app_url }}"
        
        echo "📊 **Zeabur 部署結果報告**"
        echo ""
        
        if [ "$DEPLOY_STATUS" = "success" ]; then
          echo "🎉 **部署成功!**"
          echo "✅ 應用已成功部署到 Zeabur"
          
          if [ -n "$APP_URL" ]; then
            echo "🔗 **應用 URL:** $APP_URL"
            echo "📞 **Webhook URL:** $APP_URL/callback"
          fi
          
          echo ""
          echo "📋 **後續步驟:**"
          echo "1. 設置 LINE Bot Webhook URL"
          echo "2. 測試 LINE Bot 功能"
          echo "3. 檢查應用日誌"
          
        else
          echo "❌ **部署失敗**"
          echo "請檢查部署日誌排查問題"
        fi
        
        if [ "$TEST_STATUS" = "success" ]; then
          echo "✅ 部署後測試通過"
        elif [ "$TEST_STATUS" = "failure" ]; then
          echo "⚠️ 部署後測試失敗"
        fi
        
        echo ""
        echo "🔗 **相關連結:**"
        echo "- [Zeabur Dashboard](https://dash.zeabur.com/)"
        echo "- [查看部署日誌](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        echo "- [LINE Developer Console](https://developers.line.biz/console/)"